const H="INTERNAL_REQUEST_PASSWORD",M="INTERNAL_RECEIVE_PASSWORD",C="INTERNAL_RECEIVE_SIGN_OUT";var i=(s=>(s.XRPL="XRPL",s.XAHAU="XAHAU",s))(i||{}),_=(s=>(s.MAINNET="Mainnet",s.TESTNET="Testnet",s.DEVNET="Devnet",s.CUSTOM="Custom",s))(_||{}),c=(s=>(s.XAHAU_MAINNET="Mainnet",s.XAHAU_TESTNET="Testnet",s.CUSTOM="Custom",s))(c||{});const S=["wss://s1.ripple.com","wss://s2.ripple.com"],o=["wss://xrplcluster.com",...S],T=["wss://s.altnet.rippletest.net:51233","wss://testnet.xrpl-labs.com"],A=["wss://s.devnet.rippletest.net:51233"],E=["wss://xahau.network"],r=["wss://xahau-test.net"],m="https://xahau-test.net/accounts",e={XRPL:{Mainnet:{chain:"XRPL",name:"Mainnet",server:o[0],nodes:o,description:"Main network using the production version of the XRP Ledger.",networkID:0},Testnet:{chain:"XRPL",name:"Testnet",server:T[0],nodes:T,description:"Acts as a testing network, without impacting production users and risking real money.",networkID:1},Devnet:{chain:"XRPL",name:"Devnet",server:A[0],nodes:A,description:"A preview of upcoming features, where unstable changes are tested out."},Custom:{chain:"XRPL",name:"Custom",server:"",description:"Custom network configuration provided by the user."}},XAHAU:{Mainnet:{chain:"XAHAU",name:"Mainnet",server:E[0],nodes:E,description:"Mainnet for the Xahau blockchain.",networkID:21337},Testnet:{chain:"XAHAU",name:"Testnet",server:r[0],nodes:r,description:"Testnet for the Xahau blockchain.",networkID:21338},Custom:{chain:"XAHAU",name:"Custom",server:"",description:"Custom network configuration provided by the user."}}},l=s=>{switch(s){case"XAHAU":return"Mainnet";default:return"Mainnet"}};function L(s,t){if(s==="XRPL"&&Object.values(_).includes(t)||s==="XAHAU"&&Object.values(c).includes(t))return e[s][t];throw new Error(`Network ${t} is not valid for chain ${s}`)}const U=s=>{switch(s){case 0:return e.XRPL.Mainnet;case 1:return e.XRPL.Testnet;case 21337:return e.XAHAU.Mainnet;case 21338:return e.XAHAU.Testnet;default:throw new Error(`Network ID ${s} is not valid`)}},d="gem-wallet",D="abort";var I=(s=>(s.Response="response",s.Reject="reject",s))(I||{});const f="currentWindowId",F="customNetworks",h="featureFlags",p="storageKey",w="network",G="permissionAdvancedMode",g="permissionSubmitBulkTransactions",W="rememberSession",v="selectedWallet",b="hasTxInProgress",B="trustedApps",X="wallets",K=60*60*1e3,k="/index.html",V="/about",x="/accept-nft-offer",y="/burn-nft",Y="/add-new-wallet",j="/add-new-trustline",$="/create-new-wallet",Q="/cancel-nft-offer",q="/cancel-offer",z="/create-nft-offer",J="/create-offer",Z="/delete-account",ss="/edit-wallet/:publicAddress",ts="/history",es="/home",ns="/import-mnemonic",as="/import-secret-numbers",os="/import-seed",Ts="/import-wallet",As="/list-wallets",Es="/mint-nft",rs="/permissions",_s="/reset-password",cs="/send",Rs="/receive",Ns="/settings",is="/set-account",Ss="/set-hook",Is="/set-regular-key",Ps="/sign-alices-ring",Os="/share-nft",us="/share-public-address",Hs="/share-public-key",Ms="/sign-message",Cs="/sign-transaction",ms="/submit-transaction",ls="/submit-transactions-bulk",Ls="/submit-raw-transaction",Us="/transaction",ds="/trusted-apps",Ds="/welcome",fs="/nft-viewer",Fs="share=add",hs="share=pbk",ps="share=network",ws="share=nft",Gs="sign=alicesRing",gs="sign=message",Ws="sign=transaction",vs="submit=transaction",bs="submit=txBulk",Bs="transaction=acceptNFTOffer",Xs="transaction=buildRaw",Ks="transaction=burnNFT",ks="transaction=payment",Vs="transaction=trustSet",xs="transaction=mintNFT",ys="transaction=cancelNFTOffer",Ys="transaction=cancelOffer",js="transaction=createNFTOffer",$s="transaction=createOffer",Qs="transaction=setAccount",qs="transaction=setHook",zs="transaction=setRegularKey",P=95,O=24,Js=P+O,Zs=30,st=56,tt=56,et=16,nt=620,at=360,ot=(s,t)=>new Promise((n,a)=>{chrome.storage.session.set({[s]:t},()=>{chrome.runtime.lastError?a(chrome.runtime.lastError):n()})}),Tt=(s,t=!1)=>new Promise((n,a)=>{chrome.storage.session.get(s,R=>{if(chrome.runtime.lastError)a(chrome.runtime.lastError);else{const N=R[s];t&&u(s),n(N)}})}),u=s=>new Promise((t,n)=>{chrome.storage.session.remove(s,()=>{chrome.runtime.lastError?n(chrome.runtime.lastError):t()})}),At=()=>(Date.now()+Math.random()).toString();export{xs as $,Y as A,Fs as B,i as C,hs as D,ss as E,gs as F,d as G,es as H,os as I,vs as J,ms as K,As as L,Zs as M,fs as N,Ws as O,ks as P,bs as Q,Rs as R,Ns as S,K as T,ls as U,Vs as V,Ds as W,_ as X,j as Y,ws as Z,Os as _,ts as a,Es as a0,js as a1,z as a2,ys as a3,Q as a4,Bs as a5,x as a6,Ks as a7,y as a8,Qs as a9,U as aA,Js as aB,C as aC,m as aD,S as aE,ps as aF,H as aG,nt as aH,at as aI,f as aJ,k as aK,et as aL,b as aM,is as aa,zs as ab,Is as ac,Gs as ad,Ps as ae,$s as af,J as ag,Ys as ah,q as ai,Xs as aj,Ls as ak,qs as al,Ss as am,_s as an,g as ao,G as ap,ds as aq,rs as ar,V as as,Z as at,st as au,D as av,$ as aw,Ts as ax,c as ay,At as az,w as b,l as c,F as d,B as e,X as f,L as g,v as h,h as i,us as j,Hs as k,Tt as l,Ms as m,Cs as n,tt as o,e as p,P as q,cs as r,ot as s,p as t,I as u,ns as v,as as w,Us as x,M as y,W as z};
